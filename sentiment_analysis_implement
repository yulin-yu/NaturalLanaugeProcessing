{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as py\n",
    "import csv\n",
    "import nltk\n",
    "import re\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from nltk.corpus import stopwords\n",
    "from collections import Counter\n",
    "import pprint\n",
    "import enchant\n",
    "from sklearn.metrics import f1_score\n",
    "import matplotlib.pyplot as plt; plt.rcdefaults()\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tokenize(word):\n",
    "    # this will clean website, email, @, special charater, number\n",
    "    pattern1 = re.compile(\"\\S*@\\S*\\s?|http\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(/\\S*)?\")\n",
    "    p2 = pattern1.sub('',word)\n",
    "    clean1 = re.sub('[^ a-zA-Z]','',p2)\n",
    "    stops = set(stopwords.words(\"english\"))\n",
    "    clean2 = [i for i in clean1 if i not in stops]\n",
    "    d = enchant.Dict(\"en_US\")\n",
    "    clean3 = []\n",
    "    for i in clean2:\n",
    "        if d.check(i) == True:\n",
    "            clean3.append(i)\n",
    "    return clean3\n",
    "\n",
    "def smooth(dictionary, smoo):\n",
    "    countword = dictionary.copy()\n",
    "    for a,b in countword.items():\n",
    "        countword[a] += smoo\n",
    "    word_prob = {}\n",
    "    total = float(sum(countword.values()))\n",
    "    for a,b in countword.items():\n",
    "        word_prob[a] = b / total\n",
    "    return word_prob\n",
    "\n",
    "\n",
    "def countP1P0(dictolist,smoo):\n",
    "    countwordall = dictionary[0].copy()\n",
    "    for a,b in countwordall.items():\n",
    "        countwordall[a] += smoo\n",
    "    totalall = float(sum(countwordall.values()))\n",
    "    \n",
    "    countword1 = dictionary[1].copy()\n",
    "    for a,b in countworda1.items():\n",
    "        countworda1[a] += smoo\n",
    "    total1 = float(sum(countworda1.values()))\n",
    "    \n",
    "    countword0 = dictionary[2].copy()\n",
    "    for a,b in countword0.items():\n",
    "        countword2[a] += smoo\n",
    "    total0 = float(sum(countword0.values()))\n",
    "    \n",
    "    P0 =  total0/totalall\n",
    "    P1 = total1/totalall\n",
    "    return [P1,P0]\n",
    "\n",
    "        \n",
    "def train(number, smoothingalpha=0.1):\n",
    "    Pword = smooth(number[0],smoo = smoothingalpha)\n",
    "    Pword1 = smooth(number[1],smoo = smoothingalpha)\n",
    "    Pword0 = smooth(number[2],smoo = smoothingalpha)\n",
    "    \n",
    "    countwordall = number[0].copy()\n",
    "    for a,b in countwordall.items():\n",
    "        countwordall[a] += smoothingalpha\n",
    "    totalall = float(sum(countwordall.values()))\n",
    "    \n",
    "    countword1 = number[1].copy()\n",
    "    for a,b in countword1.items():\n",
    "        countword1[a] += smoothingalpha\n",
    "    total1 = float(sum(countword1.values()))\n",
    "    \n",
    "    countword0 = number[2].copy()\n",
    "    for a,b in countword0.items():\n",
    "        countword0[a] += smoothingalpha\n",
    "    total0 = float(sum(countword0.values()))\n",
    "    \n",
    "    P0 =  total0/totalall\n",
    "    P1 = total1/totalall\n",
    "    \n",
    "    return {\"P1\":P1,\"P0\":P0,\"Pword\":Pword,\"Pword1\":Pword1,\"Pword0\":Pword0}\n",
    "\n",
    "# P1 ; Probaility of Insult\n",
    "# P0: Probabiliy of NOn insult\n",
    "# Pword: bag of word/ dictionary, probability of all the word\n",
    "# Pword1\" ...probability of word in insult condition\n",
    "# Pword0\" ...probability of word in No insult condition\n",
    "\n",
    "def classify(wordlist):\n",
    "    # Bag of word\n",
    "    bagofwordstr = ' '.join(list(train1['newst']))\n",
    "    bagofwordlist = bagofwordstr.split(\" \")\n",
    "    allword = Counter(bagofwordlist)\n",
    "\n",
    "    train11 = train1[train1['Insult'] == 1]\n",
    "    bagofwordstr1 = ' '.join(list(train11['newst']))\n",
    "    bagofwordlist1 = bagofwordstr1.split(\" \")\n",
    "    word1 = Counter(bagofwordlist1)\n",
    "\n",
    "    train0 = train1[train1['Insult'] == 0]\n",
    "    bagofwordstr0 = ' '.join(list(train0['newst']))\n",
    "    bagofwordlist0 = bagofwordstr0.split(\" \")\n",
    "    word0 = Counter(bagofwordlist0)\n",
    "    \n",
    "    alllist = [dict(allword),dict(word1),dict(word0)]\n",
    "    \n",
    "    train_r = train(alllist, 1)\n",
    "    pwordlist = []\n",
    "    pword1 = []\n",
    "    pword0 = []\n",
    "    for i in wordlist: \n",
    "        if i in bagofwordlist1 and i in bagofwordlist0:\n",
    "            pwordlist.append(train_r['Pword'][i])\n",
    "            pword1.append(train_r['Pword1'][i])\n",
    "            pword0.append(train_r['Pword0'][i])   \n",
    "        if i in bagofwordlist1 and i not in bagofwordlist0:\n",
    "            pwordlist.append(train_r['Pword'][i])\n",
    "            pword1.append(train_r['Pword1'][i])\n",
    "        if i in bagofwordlist0 and i not in bagofwordlist1:\n",
    "            pwordlist.append(train_r['Pword'][i])\n",
    "            pword1.append(train_r['Pword0'][i])\n",
    "    \n",
    "    pword1_r = py.prod(pword1)\n",
    "    pword0_r = py.prod(pword0)\n",
    "    pwordlist_r = py.prod(pwordlist)\n",
    "    \n",
    "    p0_p = (pword0_r*train_r['P0'])/pwordlist_r\n",
    "    p1_p = (pword1_r*train_r['P1'])/pwordlist_r\n",
    "    \n",
    "    if p0_p > p1_p:\n",
    "        return 0\n",
    "    if p0_p < p1_p:\n",
    "        return 1\n",
    "\n",
    "def joins(listlist):\n",
    "    s = \" \".join(listlist)\n",
    "    return s\n",
    "\n",
    "def rundevelop():\n",
    "    pass\n",
    "\n",
    "def changetraingcsv():\n",
    "    train1 = pd.read_csv(\"train.csv\") \n",
    "    train1['cleantext'] = train1['Comment'].apply(tokenize)\n",
    "    train1['newst'] =  train1['cleantext'].apply(joins)\n",
    "    \n",
    "def runtestcode():\n",
    "    test = pd.read_csv(\"test.csv\") \n",
    "    test['cleantext'] = test['Comment'].apply(tokenize)\n",
    "    test['Insult'] = test['cleantext'].apply(classify)\n",
    "    df = test.fillna(0)\n",
    "    df1['Insult'] = df1['Insult'].apply(int)\n",
    "    df1.to_csv('draft_1.csv',index = False)\n",
    "    return df1\n",
    "\n",
    "#part2\n",
    "def bettertokenize(word):\n",
    "    pattern1 = re.compile(\"\\S*@\\S*\\s?|http\\://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(/\\S*)?\")\n",
    "    p2 = pattern1.sub('',word)\n",
    "    clean1 = re.sub('[^ a-zA-Z]','',p2)\n",
    "    stops = set(stopwords.words(\"english\"))\n",
    "    list1 = clean1.lower().split()\n",
    "    clean2 = [i for i in list1 if i not in stops]\n",
    "    d = enchant.Dict(\"en_US\")\n",
    "    clean3 = []\n",
    "    for i in clean2:\n",
    "        if d.check(i) == True:\n",
    "            clean3.append(i)\n",
    "    return clean3 \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "train1 = pd.read_csv(\"train.csv\") \n",
    "train1['cleantext'] = train1['Comment'].apply(bettertokenize)\n",
    "train1['newst'] =  train1['cleantext'].apply(joins)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = pd.read_csv(\"test.csv\") \n",
    "test['cleantext'] = test['Comment'].apply(bettertokenize)\n",
    "test['Insult'] = test['cleantext'].apply(classify)\n",
    "df = test.fillna(0)\n",
    "df['Insult'] = df['Insult'].apply(int)\n",
    "df1 = df.drop(columns=['cleantext'])\n",
    "df1.to_csv('draft_112.csv',index = False) # result submit to kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.to_csv('draft_1111.csv',index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    " \n",
    "X = ('0.1','0.5','0.8','1')\n",
    "Y = np.arange(len(X))\n",
    "number = [0.75954,0.76335,0.76335,0.76717]\n",
    " \n",
    "plt.bar(Y, number)\n",
    "plt.xticks(Y, X)\n",
    "plt.ylabel('Accuracy rate')\n",
    "plt.xlabel('α')\n",
    "plt.title('Accuracy of Naive Beya Classifier when using different smoothingalphα')\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "0.75954, 0.1\n",
    "0.76335 0.5 \n",
    "0.8 0.76335\n",
    "0.76717 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6029330119764046"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dev = pd.read_csv(\"dev.csv\") \n",
    "dev['cleantext'] = dev['Comment'].apply(bettertokenize)\n",
    "dev['Insultnew'] = dev['cleantext'].apply(classify)\n",
    "af = dev.fillna(0)\n",
    "af['Insultnew'] = af['Insultnew'].apply(int)\n",
    "y_pred = list(af['Insultnew'])\n",
    "y_true = list(af['Insult'])\n",
    "\n",
    "# Create F1 score on dev data\n",
    "f1_score(y_true, y_pred, average='macro') \n",
    "f1_score(y_true, y_pred, average='micro') \n",
    "f1_score(y_true, y_pred, average='weighted')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48427215469167234"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#What happens as you change the value of smoothingalpha?   Include a plot of \n",
    "#yourclassifier’s performance on the development data where (i) your model’s \n",
    "#performance is onthe y-axis and (ii) the choice insmoothingalphais on the x-axis. \n",
    "#Note that most peopleuseα= 1; does this value give good performance for you?\n",
    "\n",
    "#The graph below plot when use α= 0.1,0.5,0.8,1. When α= 1, the algorhtme get the best performance. When α incrase from 0.1 to 1, \n",
    "#the classifer a tiny little bit better performance. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Task 2: Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "def Sigmoid(T):\n",
    "    return 1/(1 + np.exp(-T))\n",
    "\n",
    "#part2\n",
    "def log_likelihood(number,T):\n",
    "    a = np.sum(number*T - np.log(1 + np.exp(T)))\n",
    "    return a\n",
    "\n",
    "#make bag of word into vector\n",
    "def wordtovector(word):\n",
    "    bagofwordstr = ' '.join(list(train1['newst']))\n",
    "    bagofwordlist = bagofwordstr.split(\" \")\n",
    "    wordset = list(set(bagofwordlist))\n",
    "    wordsvector = [0]*len(wordset)\n",
    "    for i in word:\n",
    "        if i in wordset:\n",
    "            wordsvector[wordset.index(i)] = 1\n",
    "    return wordsvector\n",
    "    \n",
    "def compute_gradient(trainfeatureX,trainresultY,n_row,BB):\n",
    "    r = random.randint(0,n_row)\n",
    "    err = trainresultY[r] - Sigmoid(trainfeatureX[r].dot(BB))\n",
    "    gradient = trainfeatureX[r].T.dot(err)\n",
    "    return gradient\n",
    "\n",
    "def logisticregression(X,Y,learning_rate=0.9,num_steps = 30000): \n",
    "    #set of the word\n",
    "    #####\n",
    "    trainmatrixpre = []\n",
    "    for i in X:\n",
    "        trainmatrixpre.append(wordtovector(i))\n",
    "    ######\n",
    "    trainfeature =  np.matrix(trainmatrixpre)\n",
    "    trainresult =  np.matrix(list(Y)).T\n",
    "    a,b = trainfeature.shape\n",
    "    B = np.matrix(np.ones((b,1)))\n",
    "    row = int(a) - 1\n",
    "    calloglikehood = []\n",
    "    for a in range(num_steps):\n",
    "        gra = compute_gradient(trainfeature,trainresult,row,B)\n",
    "        B += learning_rate*gra\n",
    "    return B\n",
    "\n",
    "\n",
    "def predict(test,Bresult):\n",
    "    #Bresult = logisticregression(train1['cleantext'],train1['Insult'])\n",
    "    testmatrixpre = []\n",
    "    for i in test: \n",
    "        testmatrixpre.append(wordtovector(i))\n",
    "    testfeature =  np.matrix(testmatrixpre)\n",
    "    P = Sigmoid(testfeature*Bresult)\n",
    "    listofresult = []\n",
    "    for a in range(testfeature.shape[0]):\n",
    "        if P[a][0] < 0.5:\n",
    "            listofresult.append(int(0))\n",
    "        if P[a][0] >= 0.5:\n",
    "            listofresult.append(int(1))\n",
    "    return listofresult"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "if 3 == 1 or 2 or 3:\n",
    "    print(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "train11 = pd.read_csv(\"train.csv\") \n",
    "train11['cleantext'] = train11['Comment'].apply(bettertokenize)\n",
    "train11['newst'] =  train11['cleantext'].apply(joins)\n",
    "result = logisticregression(train11['cleantext'],train11['Insult'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "test1 = pd.read_csv(\"test.csv\") \n",
    "test1['cleantext'] = test1['Comment'].apply(tokenize)\n",
    "test1['newst'] =  test1['cleantext'].apply(joins)\n",
    "Presult = predict(test1['cleantext'],result)\n",
    "test1['Insult'] =  Presult\n",
    "af = test1.drop(columns = ['cleantext','newst'])\n",
    "af.to_csv('lg10.csv',index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6495280408038376"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dev1 = pd.read_csv(\"dev.csv\") \n",
    "dev1['cleantext'] = dev1['Comment'].apply(bettertokenize)\n",
    "Presult = predict(dev1['cleantext'],result)\n",
    "dev1['Insultnew'] =  Presult\n",
    "dev1['Insultnew'] = dev1['Insultnew'].apply(int)\n",
    "y_pred = list(dev1['Insultnew'])\n",
    "y_true = list(dev1['Insult'])\n",
    "\n",
    "# Create F1 score on dev data\n",
    "f1_score(y_true, y_pred, average='macro') \n",
    "f1_score(y_true, y_pred, average='micro') \n",
    "f1_score(y_true, y_pred, average='weighted')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "X = ('0.1','0.5','0.9','1','10')\n",
    "Y = np.arange(len(X))\n",
    "number = [0.56488,0.75954,0.78244,0.38167,0.74809]\n",
    " \n",
    "plt.bar(Y, number)\n",
    "plt.xticks(Y, X)\n",
    "plt.ylabel('performance ( Accuracy rate)')\n",
    "plt.xlabel('learning rate')\n",
    "plt.title('performance of logistic regression Classifier when using different learning rate')\n",
    " \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 20%|█▉        | 5853/30000 [18:01<1:12:17,  5.57it/s]"
     ]
    }
   ],
   "source": [
    "#get likehood\n",
    "from tqdm import tqdm\n",
    "\n",
    "def logisticregression1(X,Y,learning_rate=5e-5,num_steps = 30000): \n",
    "    #set of the word\n",
    "    #####\n",
    "    trainmatrixpre = []\n",
    "    for i in X:\n",
    "        trainmatrixpre.append(wordtovector(i))\n",
    "    ######\n",
    "    trainfeature =  np.matrix(trainmatrixpre)\n",
    "    trainresult =  np.matrix(list(Y)).T\n",
    "    a,b = trainfeature.shape\n",
    "    B = np.array(np.ones((b,1)))\n",
    "    row = int(a) - 1\n",
    "    calloglikehood1 = []\n",
    "    for a in tqdm(range(num_steps)):\n",
    "        gra = compute_gradient(trainfeature,trainresult,row,B)\n",
    "        B += learning_rate*gra\n",
    "        if num_steps%10000 == 0:\n",
    "            calloglikehood1.append(log_likelihood(trainresult.T,np.dot(trainfeature,B)))\n",
    "       # if num_steps == 10000:\n",
    "        #    calloglikehood1.append(log_likelihood(trainresult,trainfeature.dot(B)))\n",
    "       # if num_steps == 20000:\n",
    "        #    calloglikehood2.append(log_likelihood(trainresult,trainfeature.dot(B)))\n",
    "       # if num_steps == 30000:\n",
    "          #  calloglikehood3.append(log_likelihood(trainresult,trainfeature.dot(B)))\n",
    "    return calloglikehood1\n",
    "\n",
    "calloglikehood = logisticregression1(train11['cleantext'],train11['Insult'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "calloglikehood "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
